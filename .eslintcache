[{"D:\\yoo\\htdocs\\000\\React\\lab_v2.0\\src\\index.js":"1","D:\\yoo\\htdocs\\000\\React\\lab_v2.0\\src\\App.js":"2","D:\\yoo\\htdocs\\000\\React\\lab_v2.0\\src\\reportWebVitals.js":"3","D:\\yoo\\htdocs\\000\\React\\lab_v2.0\\src\\pages\\About.js":"4","D:\\yoo\\htdocs\\000\\React\\lab_v2.0\\src\\pages\\Home.js":"5","D:\\yoo\\htdocs\\000\\React\\lab_v2.0\\src\\component\\Navbar.js":"6","D:\\yoo\\htdocs\\000\\React\\lab_v2.0\\src\\pages\\Gallery.js":"7","D:\\yoo\\htdocs\\000\\React\\lab_v2.0\\src\\component\\Card.js":"8","D:\\yoo\\htdocs\\000\\React\\lab_v2.0\\src\\pages\\Cart.js":"9"},{"size":664,"mtime":1611964723782,"results":"10","hashOfConfig":"11"},{"size":671,"mtime":1611967937056,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":314,"mtime":1611674867000,"results":"14","hashOfConfig":"11"},{"size":311,"mtime":1611674867000,"results":"15","hashOfConfig":"11"},{"size":1727,"mtime":1611967882629,"results":"16","hashOfConfig":"11"},{"size":10458,"mtime":1611966918597,"results":"17","hashOfConfig":"11"},{"size":2188,"mtime":1611966600785,"results":"18","hashOfConfig":"11"},{"size":2911,"mtime":1611967616715,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"1ekhxqy",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"36","usedDeprecatedRules":"23"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"23"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\yoo\\htdocs\\000\\React\\lab_v2.0\\src\\index.js",["42"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from \"react-router-dom\";\nimport reportWebVitals from './reportWebVitals';\nimport $ from 'jquery';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["43","44"],"D:\\yoo\\htdocs\\000\\React\\lab_v2.0\\src\\App.js",[],"D:\\yoo\\htdocs\\000\\React\\lab_v2.0\\src\\reportWebVitals.js",[],"D:\\yoo\\htdocs\\000\\React\\lab_v2.0\\src\\pages\\About.js",[],"D:\\yoo\\htdocs\\000\\React\\lab_v2.0\\src\\pages\\Home.js",[],"D:\\yoo\\htdocs\\000\\React\\lab_v2.0\\src\\component\\Navbar.js",["45"],"D:\\yoo\\htdocs\\000\\React\\lab_v2.0\\src\\pages\\Gallery.js",["46","47"],"import React from \"react\"\nimport Card from \"../component/Card\"\nimport $ from 'jquery'\nimport 'bootstrap/dist/js/bootstrap.bundle'\nimport { event } from \"jquery\"\nclass Gallery extends React.Component{\n    constructor(){\n        super()\n        this.state = {\n            buku: [\n                {\n                    isbn:\"12345\", judul:\"Bulan\", penulis:\"Tere Liye\",\n                    penerbit:\"CV Harapan Kita\", harga:90000,\n                    cover:\"https://drive.google.com/uc?id=1ui-jyKgu3DqFyo7VKJu-FFXkaNQN3aSg\"\n                },\n                {\n                    isbn:\"12346\", judul:\"Anak Badai\", penulis:\"Tere Liye\",\n                    penerbit:\"CV Nusa Bangsa\", harga:80000,\n                    cover:\"https://drive.google.com/uc?id=1rJDcCOmsd14NL6DG3Wps_kewZomGcLU-\"\n                },\n                {\n                    isbn:\"54321\", judul:\"Bintang\", penulis:\"Tere Liye\",\n                    penerbit:\"CV Nusa Bangsa\", harga:70000,\n                    cover:\"https://drive.google.com/uc?id=1e-thvq7lkG1_gw0FqHzRoiAhfhdgpOUj\"\n                }\n            ],\n\n            action: \"\",\n            isbn: \"\",\n            judul: \"\",\n            penulis: \"\",\n            penerbit: \"\",\n            harga: 0,\n            cover: \"\",\n            selectedItem: null,\n            keyword: \"\",\n            filterBuku: [],\n            user: \"\"\n        }\n\n        this.state.filterBuku = this.state.buku\n\n    }\n\n    Add = () => {\n        // menampilkan komponen modal\n        $(\"#modal_buku\").modal(\"show\")\n        this.setState({\n            isbn: Math.random(1, 10000000),\n            judul: \"\",\n            penulis: \"\",\n            penerbit: \"\",\n            cover: \"\",\n            harga: 0,\n            action: \"insert\"\n        })\n    }\n\n    Edit = (item) => {\n        // mengedit komponen modal\n        $(\"#modal_buku\").modal(\"show\")\n        this.setState({\n            isbn: item.isbn,\n            judul: item.judul,\n            penulis: item.penulis,\n            penerbit: item.penerbit,\n            cover: item.cover,\n            harga: item.harga,\n            action: \"update\",\n            selectedItem: item\n        })\n    }\n\n    Save = (event) => {\n        event.preventDefault();\n        // menampung data state buku\n        let tempBuku = this.state.buku\n\n        if (this.state.action === \"insert\") {\n            // menambah data baru\n            tempBuku.push({\n                isbn: this.state.isbn,\n                judul: this.state.judul,\n                penulis: this.state.penulis,\n                penerbit: this.state.penerbit,\n                cover: this.state.cover,\n                harga: this.state.harga\n            })\n        }else if(this.state.action === \"update\") {\n            // menyimpan perubahan data\n            let index = tempBuku.indexOf(this.state.selectedItem)\n            tempBuku[index].isbn = this.state.isbn\n            tempBuku[index].judul = this.state.judul\n            tempBuku[index].penulis = this.state.penulis\n            tempBuku[index].penerbit = this.state.penerbit\n            tempBuku[index].cover = this.state.cover\n            tempBuku[index].harga = this.state.harga\n        }\n\n        this. setState({buku : tempBuku})\n\n        // menutup komponen modal_buku\n        $(\"#modal_buku\").modal(\"hide\")\n    }\n\n    Drop = (item) => {\n        // beri konfirmasi untuk menghapus data\n        if(window.confirm(\"Apakah anda yakin menghapus data ini ?\")) {\n            // menghapus data\n            let tempBuku = this.state.buku\n\n            // posisi index data yang akan dihapus\n            let index = tempBuku.indexOf(item)\n\n            // hapus data\n            tempBuku.splice(index, 1)\n\n            this.setState({buku : tempBuku})\n        }\n    }\n\n    searching = event => {\n        if(event.keyCode === 13) {\n            // 13 adalah kode untuk tombol enter\n\n            let keyword = this.state.keyword.toLowerCase()\n            let tempBuku = this.state.buku\n            let result = tempBuku.filter(item => {\n                return item.judul.toLowerCase().includes(keyword) ||\n                item.penulis.toLowerCase().includes(keyword) ||\n                item.penerbit.toLowerCase().includes(keyword)\n            })\n\n            this.setState({filterBuku: result})\n        }\n    }\n\n    setUser = () => {\n        // cek eksistensi dari session storage\n        if(localStorage.getItem(\"user\") === null){\n            // kondisi jika session storage \"user\" belum dibuat\n            let prompt = window.prompt(\"Masukkan Nama Anda\",\"\")\n            if(prompt === null || prompt === \"\"){\n                // jika user tidak mengisikan namanya\n                this.setUser()\n            }else{\n                // jika user telah mengisikan namanya\n\n                // simpan nama user ke session storage\n                localStorage.setItem(\"user\", prompt)\n\n                // simpan nama user ke state.user\n                this.setState({user: prompt})\n            }\n        }else{\n            // kondisi saat session storage \"user\" telah dibuat\n\n            // akses nilai dari session storage \"user\"\n            let name = localStorage.getItem(\"user\")\n            this.setState({user: name})\n        }\n    }\n\n    addToCart = (selectedItem) => {\n        // membuat sebuah variabel untuk menampung cart sementara\n        let tempCart = []\n\n        // cek eksistensi dari data cart pada localStorage\n        if(localStorage.getItem(\"cart\") !== null){\n            tempCart = JSON.parse(localStorage.getItem(\"cart\"))\n            // JSON.parse() digunakan untuk mengonversi dari string -> array object\n        }\n\n        // cek data yang dipilih user ke keranjang belanja\n        let existItem = tempCart.find(item => item.isbn === selectedItem.isbn)\n\n        if(existItem){\n            // jika item yang dipilih ada pada keranjang belanja\n            window.alert(\"Anda telah memilih item ini\")\n        }else{\n            // user diminta memasukkan jumlah item yang dibeli\n            let promptJumlah = window.prompt(\"Masukkan jumlah item yang beli\",\"\")\n            if(promptJumlah !== null && promptJumlah !== \"\"){\n                // jika user memasukkan jumlah item yg dibeli\n\n                // menambahkan properti \"jumlahBeli\" pada item yang dipilih\n                selectedItem.jumlahBeli = promptJumlah\n                \n                // masukkan item yg dipilih ke dalam cart\n                tempCart.push(selectedItem)\n\n                // simpan array tempCart ke localStorage\n                localStorage.setItem(\"cart\", JSON.stringify(tempCart))\n            }\n        }\n    }\n\n\n    componentDidMount(){\n        this.setUser()\n    }\n\n    render(){\n        return(\n            <div className=\"container\">\n                 <h4 className=\"text-info my-2\">\n                    Nama Pengguna: { this.state.user }\n                </h4>\n                <input type=\"text\" className=\"form-control my-2\" placeholder=\"Pencarian\"\n                onChange={ev => this.setState({keyword: ev.target.value})}\n                onKeyUp={ev => this.searching(ev)} />\n                <div className=\"row\">\n                    { this.state.filterBuku.map( (item, index) => (\n                        <Card\n                        judul={item.judul}\n                        penulis={item.penulis}\n                        penerbit={item.penerbit}\n                        harga={item.harga}\n                        cover={item.cover}\n                        onEdit={() => this.Edit(item)}\n                        onDrop={() => this.Drop(item)}\n                        onCart={ () => this.addToCart(item)}\n                        />\n                    ) ) }\n                </div>\n\n                <button className=\"btn btn-success\" onClick={() => this.Add()}>\n                    Tambah Data\n                </button>\n\n                {/* component modal sebagai control manipulasi data */}\n                <div className=\"modal\" id=\"modal_buku\">\n                    <div className=\"modal-dialog\">\n                        <div className=\"modal-content\">\n                            {/* modal header */}\n                            <div className=\"modal-header\">\n                                Form Buku\n                            </div>\n\n                            {/* modal body */}\n                            <div className=\"modal-body\">\n                                <form onSubmit={ev => this.Save(ev)}>\n                                    Judul Buku\n                                    <input type=\"text\" className=\"form-control mb-2\"\n                                    value={this.state.judul}\n                                    onChange={ev => this.setState({judul: ev.target.value})}\n                                    required />\n\n                                    Penulis Buku\n                                    <input type=\"text\" className=\"form-control mb-2\"\n                                    value={this.state.penulis}\n                                    onChange={ev => this.setState({penulis: ev.target.value})}\n                                    required />\n\n                                    Penerbit Buku\n                                    <input type=\"text\" className=\"form-control mb-2\"\n                                    value={this.state.penerbit}\n                                    onChange={ev => this.setState({penerbit: ev.target.value})}\n                                    required />\n\n                                    Harga Buku\n                                    <input type=\"text\" className=\"form-control mb-2\"\n                                    value={this.state.harga}\n                                    onChange={ev => this.setState({harga: ev.target.value})}\n                                    required />\n\n                                    Cover Buku\n                                    <input type=\"url\" className=\"form-control mb-2\"\n                                    value={this.state.cover}\n                                    onChange={ev => this.setState({cover: ev.target.value})}\n                                    required />\n\n                                    <button className=\"btn btn-info btn-block\" type=\"submit\">\n                                        Simpan\n                                    </button>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Gallery;","D:\\yoo\\htdocs\\000\\React\\lab_v2.0\\src\\component\\Card.js",["48"],"import React from \"react\"\n\nclass Card extends React.Component{\n    render(){\n        return(\n            <div className=\"col-lg-6 col-sm-12 p-2\">\n                <div className=\"card\">\n                    <div className=\"card-body row\">\n                        {/* menampilkan gambar / cover */}\n                        <div className=\"col-5\">\n                            <img src={ this.props.cover } className=\"img\"\n                            height=\"200\" />\n                        </div>\n\n                        {/* menampilkan deskripsi */}\n                        <div className = \"col-7\">\n                            <h5 className=\"text-info\">\n                                { this.props.judul }\n                            </h5>\n                            <h6 className=\"text-dark\">\n                                Penulis: { this.props.penulis }\n                            </h6>\n                            <h6 className=\"text-dark\">\n                                Penerbit: { this.props.penerbit }\n                            </h6>\n                            <h6 className=\"text-danger\">\n                                Harga: Rp { this.props.harga }\n                            </h6>\n\n                            {/* button untuk mengedit */}\n                            <button className=\"btn btn-sm btn-primary m-1\"\n                            onClick={this.props.onEdit}>\n                                Edit\n                            </button>\n\n                            {/* button untuk menghapus */}\n                            <button className=\"btn btn-sm btn-danger m-1\"\n                            onClick={this.props.onDrop}>\n                                Hapus\n                            </button>\n\n                            {/* button untuk menambah ke keranjang belanja */}\n                            <button className=\"btn btn-sm btn-success m-1\"\n                            onClick={this.props.onCart}>\n                                Tambahkan ke keranjang belanja\n                            </button>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Card;","D:\\yoo\\htdocs\\000\\React\\lab_v2.0\\src\\pages\\Cart.js",["49"],{"ruleId":"50","severity":1,"message":"51","line":7,"column":8,"nodeType":"52","messageId":"53","endLine":7,"endColumn":9},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":7,"column":17,"nodeType":"60","endLine":7,"endColumn":54},{"ruleId":"50","severity":1,"message":"61","line":5,"column":10,"nodeType":"52","messageId":"53","endLine":5,"endColumn":15},{"ruleId":"62","severity":1,"message":"63","line":100,"column":9,"nodeType":"64","messageId":"65","endLine":100,"endColumn":23,"fix":"66"},{"ruleId":"67","severity":1,"message":"68","line":11,"column":29,"nodeType":"60","endLine":12,"endColumn":44},{"ruleId":"69","severity":1,"message":"70","line":26,"column":27,"nodeType":"71","messageId":"72","endLine":26,"endColumn":29},"no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","no-native-reassign",["73"],"no-negated-in-lhs",["74"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'event' is defined but never used.","no-whitespace-before-property","Unexpected whitespace before property setState.","MemberExpression","unexpectedWhitespace",{"range":"75","text":"76"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",[3157,3159],"."]